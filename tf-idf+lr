tf-idf+
#读取数据
import pandas as pd
import numpy as np
from collections import Counter
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import f1_score
from sklearn.metrics import accuracy_score
from xgboost import XGBClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.linear_model import RidgeClassifier

#导入数据
train_data=pd.read_csv('datalab/72510/train_set.csv',sep='\t',)
test_data=pd.read_csv('datalab/72510/test_a.csv',sep='\t',)
new_data=pd.concat([train_data['text'],test_data['text']])
#检查数据量
a=len(train_data)
b=len(test_data)
c=len(new_data)
print(a,b,c)
#tf-idf
tfidf = TfidfVectorizer(ngram_range=(1,3), max_features=3000)###提取特征
train_test = tfidf.fit_transform(train_df['text'])

clf = RidgeClassifier()
clf.fit(train_test[:10000], train_data['label'].values[:10000])

val_pred = clf.predict(train_test[10000:])
print(f1_score(train_data['label'].values[10000:], val_pred, average='macro'))
#0.87


####
###另一个
from sklearn.feature_extraction.text import TfidfVectorizer
word_vectorizer = TfidfVectorizer(
    sublinear_tf=True,
    strip_accents='unicode',
    analyzer='word',
    token_pattern=r'\w{1,}',
    stop_words='english',
    ngram_range=(1, 1),
    max_features=10000)
new_data=pd.concat([train_data['text'],test_data['text']])

word_vectorizer.fit(new_data)
train_word_features = word_vectorizer.transform(train_data['text'])
test_word_features = word_vectorizer.transform(test_data['text'])
train_word_features

X_train = train_word_features
y_train = train_data['label']

# 可以改变输入维度
x_train_, x_valid_, y_train_, y_valid_ = train_test_split(X_train, y_train, test_size=0.2)
X_test = test_word_features


clf = LogisticRegression(C=4, n_jobs=16)
clf.fit(x_train_, y_train_)

y_pred = clf.predict(x_valid_)
train_scores = clf.score(x_train_, y_train_)
print(train_scores, f1_score(y_pred, y_valid_, average='macro'))#f1：0.9
